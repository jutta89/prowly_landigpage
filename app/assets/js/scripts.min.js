"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}document.addEventListener("DOMContentLoaded",function(){function t(t){return'<div class="search-person-item">\n\t\t\t\t\t<div class="search-person__avatar"> <img src="'+t.avatar+'" alt="avatar" /> </div> \n\t\t\t\t\t<div class="search-person__text"> \n\t\t\t\t\t\t<div class="search-person__name">\n\t\t\t\t\t\t'+t.firstName+" "+t.lastName+'\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="search-person__position">\n\t\t\t\t\t\t'+t.position+"\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>"}function e(e){c=e.target.value&&0!==e.target.value.lenght?r.filter(function(t){return t.firstName.toLowerCase().includes(e.target.value.toLowerCase())}):[].concat(r),c.length>0?l.classList.remove("is-hidden"):(l.classList.add("is-hidden"),d.classList.remove("is-focused"));var s=c.map(function(e){return t(e)});l.innerHTML="",s.forEach(function(t){l.innerHTML+=t});var n=d.offsetHeight+l.offsetHeight-1,a=document.getElementById("input-shadow");l.classList.contains("is-hidden")&&(a.style.height=n+"px")}var s=function u(t,e,s,n){_classCallCheck(this,u),this.firstName=t,this.lastName=e,this.avatar=s,this.position=n},n=new s("Asia","Kaczmarek","../assets/img/bg.png","Front-end"),a=new s("Joanna","Nowak","../assets/img/bg.png","Front-end"),i=new s("Kasia","Iksińska","../assets/img/bg.png","Zawod"),o=new s("Paweł","Nazwiskowy","../assets/img/bg.png","Front-end"),r=[n,a,i,o],c=[].concat(r),d=document.getElementById("search-person"),l=document.getElementById("persons-list");d.addEventListener("keyup",e),d.addEventListener("focusin",function(){l.classList.remove("is-hidden"),d.classList.add("is-focused");var e=r.map(function(e){return t(e)});l.innerHTML="",e.forEach(function(t){l.innerHTML+=t})}),d.addEventListener("focusout",function(){l.classList.add("is-hidden"),d.classList.remove("is-focused"),d.value=d.defaultValue})},!1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
